# Задача 10: На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом.
# Определите минимальное число монеток, которые нужно перевернуть, чтобы все монетки были повернуты
# вверх одной и той же стороной. Выведите минимальное количество монет, которые нужно перевернуть.

'''
P.S. При объяснении дз не обсуждалось, как задавать положение монеток, поэтому я решил
импортировать random.
'''

# import random
#
#
# def coins(num: int):
#     row = [random.randint(0, 1) for i in range(num)]
#     print(row)
#     if row.count(1) > row.count(0):
#         print(row.count(0))
#     else:
#         print(row.count(1))
#
#
# coins(5)
# coins(7)
# coins(11)


# Задача 12: Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница.
# Петя помогает Кате по математике. Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать.
# Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P.
# Помогите Кате отгадать задуманные Петей числа.

'''
Чтобы задуманные числа были натуральными, их сумма должна быть отрицательной,
иначе задуманное число нельзя будет отнести к натуральным (оно будет отрицательным)
Возможно, тут было решение через тему урока (циклы), но мне сразу бросилась в глаза теорема Виета
'''

# def quest(s: int, p: int):
#     discriminant = s * s - 4 * p
#     x1 = int((-s - discriminant ** 0.5) / 2)
#     x2 = int((-s + discriminant ** 0.5) / 2)
#     print(x1, x2)
#
#
# quest(-8, 15)
# quest(-10, 21)


# Задача 14: Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числа N.

# def degree(num: int):
#     k = 0
#     result = []
#     while 2 ** k < num:
#         result.append(2 ** k)
#         k +=1
#     print(result)
#
# degree(100)
# degree(1000)
# degree(1025)
