import re

# Задача 16: Требуется вычислить, сколько раз встречается некоторое число X в массиве A[1..N].
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X

"""
На всякий хочу сделать пояснение, что такие имена переменным даны потому как их имена уже определены в условии
"""

# def count_digit():
#     a = []
#     n = int(input("Введите длину списка: "))
#     for i in range(n):
#         i = int(input("Введите число: "))
#         a.append(i)
#     x = a.count(int(input("Введите число для подсчета его экземпляров в списке: ")))
#     print(f"Длина списка составляет {n} элементов\n{a}\nискомое число встречается в списке {x} раз.")
#
#
# count_digit()

# Требуется найти в массиве A[1..N] самый близкий по величине элемент к заданному числу X.
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X

# def nearest_num(num: int):
#     a = []
#     n = int(input("Введите длину списка: "))
#     for i in range(n):
#         i = int(input("Введите число: "))
#         a.append(i)
#     difference = {}
#     for i in a:
#         difference[i] = num - i
#     x = min(difference, key=difference.get)
#     print(f"Длина списка составляет {n} элементов\n{a}\nнаиболее близкое по величине число в списке - {x}")
#
# nearest_num(10)


# *Задача 20: * В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность. В случае с английским
# алфавитом очки распределяются так:A, E, I, O, U, L, N, S, T, R – 1 очко; D, G – 2 очка; B, C, M, P – 3 очка;
# F, H, V, W, Y – 4 очка; K – 5 очков; J, X – 8 очков; Q, Z – 10 очков.
# А русские буквы оцениваются так: А, В, Е, И, Н, О, Р, С, Т – 1 очко; Д, К, Л, М, П, У – 2 очка; Б, Г, Ё, Ь, Я – 3 очка;
# Й, Ы – 4 очка; Ж, З, Х, Ц, Ч – 5 очков; Ш, Э, Ю – 8 очков; Ф, Щ, Ъ – 10 очков. Напишите программу, которая вычисляет
# стоимость введенного пользователем слова. Будем считать, что на вход подается только одно слово,
# которое содержит либо только английские, либо только русские буквы.

"""
Мне было лень переписывать весь алфавит, к тому же смотрелось громоздко, поэтому решил сократить код с помощью регулярки
"""

#
# def scrabble(word: str):
#     eng_letters = {1: 'AEIOULNSTR', 2: 'DG', 3: 'BCMP',
#                    4: 'FHVWY', 5: "K", 8: 'JX', 10: 'QZ'}
#     rus_letters = {1: 'АВЕИНОРСТ', 2: 'ДКЛМПУ', 3: 'БГЁЬЯ',
#                    4: 'ЙЫ', 5: 'ЖЗХЦЧ', 8: 'ШЭЮ', 10: 'ФШЪ'}
#
#     if re.search('[a-zA-Z]', word):
#         result = 0
#         for letter in word:
#             for value, letters in eng_letters.items():
#                 if letter.upper() in letters:
#                     result += value
#         print(f'стоимость введенного английского слова = {result}')
#     else:
#         result = 0
#         for letter in word:
#             for value, letters in rus_letters.items():
#                 if letter.upper() in letters:
#                     result += value
#         print(f'стоимость введенного русского слова = {result}')
#
# scrabble('Альбатрос')
# scrabble('GeekBrains')